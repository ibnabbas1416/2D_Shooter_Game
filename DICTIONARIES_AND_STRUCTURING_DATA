#The Dictionary Data Type
my_cat = {'size': 'fat', 'color': 'gray', 'age': 17}
print(my_cat['size'])
print('My cat has ' + my_cat['color'] + ' fur.')

spam = {12345: 'Luggage Combination', 42: 'The Answer'}
print(spam[42])

#Comparing Dictionaries and Lists
spam = ['cats', 'dogs', 'moose']
bacon = ['dogs', 'moose', 'cats']
print(spam == bacon)
eggs = {'name': 'Zophie', 'species': 'cat', 'age': '8'}
ham = {'species': 'cat', 'age': '8', 'name': 'Zophie'}
print(ham == eggs)

#Returning Keys and Values
spam = {'color': 'red', 'age': 42}
for v in spam.values():     
    print(v)
for k in spam.keys(): 
    print(k)
print('color' in spam.keys())

print('age' not in spam.keys())

print('red' in spam.values())

for i in spam.items(): print(i)
print('color' in spam)

print('color' in spam.keys())
spam = {'color': 'red', 'age': 42} 
print(spam.keys()) # Returns a list-like dict_keys value
print(list(spam.keys())) 
for k, v in spam.items():print('Key: ' + str(k) + ' Value: ' + str(v))

#Checking Whether a Key Exists
picnic_items = {'apples': 5, 'cups': 2}
print('I am bringing ' + str(picnic_items.get('cups', 0)) + ' cups.')
print('I am bringing ' + str(picnic_items.get('eggs', 0)) + ' eggs.')
#Because there is no 'eggs' key in the picnic_items dictionary, the get() method returns the default value 0. Without using get(), the code would have caused an error message, such as in the following example:

#picnic_items = {'apples': 5, 'cups': 2}
#print('I am bringing ' + str(picnic_items['eggs']) + ' eggs.')

#Setting Default Values
spam = {'name': 'Abdullah', 'age': 14}
if 'color' not in spam:
    spam['color'] = 'black'
print(spam)

spam = {'name': 'Abdullah', 'age': 14}
spam.setdefault('color', 'White')  

print(spam)

spam.setdefault('color', 'white') 
print(spam)
